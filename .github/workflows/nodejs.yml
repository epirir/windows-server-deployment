name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: windows-latest
    env:
      TEST_SERVER: ${{ secrets.WINDOWS_SERVER_IP }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set Up Node.js Environment
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install Project Dependencies
        run: npm install

      - name: Run ESLint Code Analysis
        run: npx eslint .

      - name: Execute Unit Tests
        run: npm test

      - name: Install Chocolatey Package Manager
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force; 
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; 
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

      - name: Install WinSCP via Chocolatey
        run: choco install winscp -y
      
      - name: Verify Server Connectivity
        run: |
          # Test-Connection -ComputerName $env:TEST_SERVER -Count 2
      
      - name: Transfer Files to Windows Server using WinSCP
        run: |
          # # Define the WinSCP script to upload files
          # $script = @'
          # option batch abort
          # option confirm off
          # open sftp://${{ secrets.WINDOWS_SERVER_USER }}:${{ secrets.WINDOWS_SERVER_PASSWORD }}@${{ secrets.WINDOWS_SERVER_IP }}
          # put -r ./* /C:/Aplications/
          # exit
          # '@

          # # Save the script to a temporary file
          # $scriptPath = "$env:USERPROFILE\winscp-script.txt"
          # $script | Set-Content -Path $scriptPath

          # # Execute WinSCP with the script
          # & "C:\Program Files (x86)\WinSCP\WinSCP.com" /script=$scriptPath

      - name: Restart IIS on Remote Server
        run: |
          # Invoke-WebRequest -Uri "http://$env:TEST_SERVER/api/restart" -UseBasicParsing